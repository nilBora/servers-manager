generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Provider {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  consoleUrl  String?  @map("console_url")
  notes       String?
  servers     Server[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Person {
  id           Int      @id @default(autoincrement())
  name         String
  email        String?
  telegram     String?
  serversOwned Server[] @relation("ServerOwner")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Server {
  id                    Int               @id @default(autoincrement())
  name                  String
  hostname              String            @unique
  ipPublic              String?           @map("ip_public")
  ipPrivate             String?           @map("ip_private")
  port                  Int?              @default(22)
  username              String?
  password              String?
  sshKey                String?           @map("ssh_key")
  status                ServerStatus      @default(ACTIVE)
  purpose               ServerPurpose?    @default(DEV)
  billingType           BillingType?      @default(MONTHLY) @map("billing_type")
  costMonthEstimated    Float?            @map("cost_month_estimated")
  decommissionAt        DateTime?         @map("decommission_at")

  // Provider relationship
  providerId            Int?              @map("provider_id")
  provider              Provider?         @relation(fields: [providerId], references: [id])

  // Owner relationship
  ownerId               Int?              @map("owner_id")
  owner                 Person?           @relation("ServerOwner", fields: [ownerId], references: [id])

  // Technical specs
  os                    String?
  cpu                   String?
  ram                   String?
  storage               String?
  location              String?

  // Additional fields
  description           String?
  tags                  String?
  account               String?

  // Cost snapshots relationship
  costSnapshots         CostSnapshot[]

  createdAt             DateTime          @default(now()) @map("created_at")
  updatedAt             DateTime          @updatedAt @map("updated_at")
}

model CostSnapshot {
  id        Int      @id @default(autoincrement())
  serverId  Int      @map("server_id")
  server    Server   @relation(fields: [serverId], references: [id], onDelete: Cascade)
  month     DateTime
  costMonth Float    @map("cost_month")
  source    String?
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([serverId, month])
}

enum ServerStatus {
  ACTIVE
  STANDBY
  TO_DECOM
}

enum ServerPurpose {
  PROD
  STAGING
  DEV
  TEST
}

enum BillingType {
  HOURLY
  MONTHLY
  SPOT
}
